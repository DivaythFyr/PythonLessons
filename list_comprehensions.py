# генератор списка - это особая запись при которой
# цикл for генерируется
# прямо внутри списка
# сначала записывается переменная, она символизирует то, что делать
# с элементом списка
# затем пишется цикл for с той же начальной переменной и указывается,
# откуда брать элементы списка
# [что делать  for i in ...]

# print([i for i in range(1, 11)])
# аналог этой записи
# L = []
# for i in range(1, 11):
# 	L.append(i)

# Задание: генератор списка выводит список кубов
# из чисел от -3 до 10



# Задание: функция принимает список чисел
# и выводит список строк из них









# Задание: функция принимает список строк
# и добавляет каждой строке "!"




#Напишите программу, которая принимает на вход
# строку, и отслеживает, сколько раз каждый символ
# уже встречался. Количество повторов добавляется к
# символам с помощью постфикса формата _n. -> a_2b_12c_15




# Задание изменить функцию так,
# чтобы вместо цикла был генератор списка




# в генератор списков можно добавлять if,
# знаки препинания внутри
# генератора списка не нужны
# if и else вместе пишутся обязательно до цикла
# Но if без else можно писать и после цикла
# print([number if number % 2 == 0 else number*7 for number in range(20)])
# print([number for number in range(20) if number % 2 == 0 else number*7])
# print([number for number in range(20) if number % 2 == 0])








# Аналог elif засчет только if и else
# if условие:
# 	что-то делается
# else:
# 	if условие:
# 		что-то делается
# 	else:
# 		что-то делается

# print([i if i % 10 == 0 else i**3 if i % 7 ==0 else i**2 for i in range(100)])


# Задание: добавить любой аналог elif в генератор списка

# x = [1,2,3,4,5,4,3,2,1]
# print(["Good" if i>=4 else "Neutral" if i==3 else "Bad" for i in x])







# Задание: написать этот код без генератора списка
#print([i**2 for i in range(10) if i % 2 == 0])





# Задача: найти все числа от 1-1000
# которые делятся на 8, а если не делятся,
# то превратить их в строку
# print([i if i % 8 == 0 else str(i) for i in range(1, 1001)])







# Задача: найти все числа от 1-1000
# в которых есть 3 и оно не кратно 3,
# иначе умножить на 4



# if '3' in число превращенное в строку



# print([i for i in range(1, 1000) if '3' in str(i)])




# Задание: Сосчитать количество пробелов в строке
# Вывести все пробелы в генератор списка
# и посмотреть его длину

# Пример: 'dfdfd dfdfd dfdfd dfdfd dfdfd dfdfd' -> 5
string = "dfd sf sfdfdsfsdf sdfsdf"
l = [i for i in string if i == " "]
print(len(l))








# len([string.split()]) -1
# for i in string if i == ' ' другая опция
string = 'fgfgf fgfgf srewre fgfh'
#print([i for i in string if i == ' '])
#print(len([i for i in string.split()]) - 1)



# Функция принимает неограниченное количество чисел
# и возводит все в квадрат
# *args, [*args], return [i**2]


# Написать функцию, которая находит одинаковые числа в двух списках
# генератором списка
# [1, 2, 1, 1, 0], [33, 0, 0, 1] -> [0, 1]
# if i in список


# Создать генератор списка, который найдет все числа от 1-10000,
# которые делятся на все числа от 2 до 9 одновременно.


# Функция записывает в файл все нечетные числа от одного до 100

# генератор словаря
# {ключ:значение for (ключ, значение) in zip (список 1, список 2)}
# zip берет два списка и делает из их элементов пары, которые
# можно итерировать

L1 = ['a', 'b', 'c']
L2 = ['A', 'B', 'C']
#print({key:value for (key, value) in zip(L1, L2)})

# можно создать ключ и значение из одного аргумента
#print({i:i**3 for i in range(10)})

# можно пройтись по старому словарю и генератором создать новый
D = {1:2, 2:3, 4:5, 6:4}
#print({key:value + 1 for key, value in D.items()})

# Сделать словарь, в котором значение это квадрат ключа,
# использовать словарь где ключи и значения - числа

# Задача: написать функцию, которая берет строку в качестве аргумента
# затем генератором словаря сделать ключи в виде букв,
# а в качестве значения
# список нулей
# нужно пройтись по этому словарю и изменить ноль на единицу,
# если в этой позиции
# гласная буква
def VowelFinder(key_str):
    vowels = 'auiyoe' # на нее будем ссылаться
    letterDict = {i:0 for i in [*key_str]} # создастся словарь
# в качестве значений которого будут буквы из строки

    for key, value in letterDict.items():
        if key in vowels:
            letterDict[key] += 1
    return letterDict
#print(VowelFinder('Hello'))

# Задание: создать словарь, в котором ключи от одного до 10,
# значения - квадрат ключа


# set - множество
# Хранит уникальные значения
# Они не индексируемые
# a = {3, 4, 5, 6}
#print(set(['aa', 'bb', 'aa', 'aa']))

def DictAdd(string):
	stringL = [*string] # Разбить строку на список символов
	setStr = set(string) # Создать множество из строки
	setStr = list(setStr) # Превратить обратно в список, чтобы
# пользоваться циклом for
	String = ''


	for i, symbol in enumerate(setStr): # проходимся по уникальным значениям
		String += str(symbol) + '_' + str(stringL.count(symbol)) # подсчет того,
	# сколько уникальное
	# значение встречается в тексте
	return String
#print(DictAdd('ssdf ghyj tytutu'))
#	return [f'{str(symbol)}_{stringL.count(symbol)}' for symbol in setStr]
